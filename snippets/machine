#!/bin/bash
# Vagrant Machine Manager
# -----------------------

configFile="machine-example.conf"
configuration=`cat $configFile`
lockers=`echo $configuration | jsawk 'return this.lockers'`
infrastructure=`echo $configuration | jsawk 'return this.infrastructure'`
if [[ -z "$SSH_AUTH_SOCK" ]]; then
	sshAgentForDocker=""	
else
	sshAgentForDocker=" -v ${SSH_AUTH_SOCK}:/ssh-agent -e SSH_AUTH_SOCK=/ssh-agent "
fi
declare -A DICTIONARY
declare -a BASH_ARRAY
declare -a lockerNonTransients

# ensure that bash is on 4.x version
function ValidateBashVersion() {
	bashVersion;
	if [[ "${BASH_MAJOR}" -lt 4 ]]; then
		echo -e "${BOLD}${RED}ERROR:${NORMAL} you must use at least version ${GREEN}4.x${NORMAL} of bash to use this script!"
		echo -e "\t${DIM}- this system is currently using version ${BASH_VERSION}${NORMAL}"
		echo ""
		exit 1
	fi
}

function bashVersion() {
	BASH_VERSION=`bash --version | sed 1q | cut -d' ' -f4`
	BASH_MAJOR=`echo ${BASH_VERSION} | cut -d'.' -f1`
	BASH_MINOR=`echo ${BASH_VERSION} | cut -d'.' -f2`
	BASH_BUILD=`echo ${BASH_VERSION} | cut -d'.' -f3`
}

#converts JSON dictionary into associative array
function getDictionary() {
	local json="$1" 
	shift # get rid of json input off of stack
	if [[ "${json:0:1}" == "[" ]]; then
		json=${json:1:-1} # strips off array characters so can operate on just object
	fi
	getDictionaryKeys $json;
	for key in $KEYS; do
		local value=`echo $json | jsawk "return this.${key}"`
		DICTIONARY["$key"]="${value}"
	done
	return 0
}

function getDictionaryKeys() {
	local json="$1"
	KEYS=`echo $json | jsawk -n 'out(_.keys(this))'`
	KEYS="${KEYS//\"}" # strip out quotation marks
	KEYS=`echo "${KEYS:1:-1}" | tr ',' '\n'` # get rid of array markers and convert commas to newlines
}

# Converts a JSON array to a bash array
function getArray() {
	local json="$1" 
	# ensure it looks like a JSON array
	if [[ "${json:0:1}" == "[" ]];then
		BASH_ARRAY=`echo "${json:1:-1}" | tr ',' '\n'`
	else 
		# doesn't look like it was an array so just return the value
		BASH_ARRAY="${json}"
	fi
}

# tests whether an array has a given string. signature is: containsElement "string" "${arrayVar[@]}"
function containsElement() {	
	local e
	for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
	return 1
}

# tests for a substring in a primary string
function hasString() {
	local lookFor="$1"; shift;
	local lookIn="$2"; shift;
	if [[ -z "${lookIn/*${lookFor}*/}" ]]; then 
		return 0
	else
		return 1
	fi
}

function displayProperties() {
	local declare -A object="$1"
	for property in $object; do
		if [[ "$property" != "id" ]]; then
			echo -e "  - ${property}: ${DIM}${DICTIONARY[${property}]}${NORMAL}"
		fi
	done;
}

# list the lockers that this machine has
function MachineInventory() {
	verbose=0
	output="text"
	while getopts ":vco:" opt; do
	    case $opt in 
	        v) 
				verbose=1
	            ;;
	        o)
				if [[ "$OPTARG" == "json" ]];then
					output="json"
				fi
				;;
			c)
				# remove color/highlighting from output
				BOLD=""
				NORMAL=""
				DIM=""
				;;
	        \? ) echo "usage: inventory [-v] [-o json|text] "
	             exit 1
	    esac
	done

	lockerList=`echo ${lockers} | jsawk -n 'out(this.id)'`
	infraList=`echo ${infrastructure} | jsawk -n 'out(this.id)'`
	
	if [[ $verbose == 1 ]]; then 
		echo ""
		echo -e "${BOLD}Lockers${NORMAL} on this machine:"
		echo "------------------------"
		for locker in $lockerList; do
			echo -e "${BOLD}${GREEN}${locker}${NORMAL}"
			container=`echo "${lockers}" | jsawk -q "[?(id='${locker}')]"`
			getDictionary "${container}";
			for property in $KEYS; do
				if [[ "$property" != "id" ]]; then
					echo -e "  - ${property}: ${DIM}${DICTIONARY[${property}]}${NORMAL}"
				fi
			done;
		done
		echo ""
		echo -e "${BOLD}Infrastructure${NORMAL} on this machine:"
		echo "-------------------------------"
		for infraItem in $infraList; do
			echo -e "${BOLD}${GREEN}${infraItem}${NORMAL}"
			container=`echo "${infrastructure}" | jsawk -q "[?(id='${infraItem}')]"`
			getDictionary "${container}";
			for property in $KEYS; do
				if [[ "$property" != "id" ]]; then
					echo -e "  - ${property}: ${DIM}${DICTIONARY[${property}]}${NORMAL}"
				fi
			done;
		done
	else
		echo "${lockers}" | jsawk -n 'out(this.id)'
		echo "${infrastructure}" | jsawk -n 'out(this.id)'
	fi
}

# load all lockers with content and run any needed prep
function LoadLockers() {
	echo ""
	echo "Loading all Lockers associated with this machine:"
	echo "-------------------------------------------------"
	while getopts ":fv" opt; do
	    case $opt in 
	        v) 
				verbose=1
	            ;;
	        f)
				forceStart=1
				;;
	        \? ) echo "invalid switch used in StartInfrastructure call"
	             exit 1
	    esac
	done
	local lockerList=`echo "$lockers" | jsawk -n 'out(this.id)'`
	local lockerNonTransients=( "load" )
	for locker in $lockerList; do
		container=`echo "${lockers}" | jsawk -q "[?(id='${locker}')]"`
		getDictionary "${container}";
		local command="${DICTIONARY['command']:=load}"
		local removeTransients
		containsElement "$command" "${lockerNonTransients[@]}"
		if [[ $? ]]; then
			removeTransients=""
		else
			removeTransients="--rm"
		fi
		local source="${DICTIONARY['source']:=none}"
		local type="${DICTIONARY['type']:=s3}"
		local prep
		if [[ -z "${DICTIONARY['prep']}" ]]; then
			prep=" -e PREP=${DICTIONARY['prep']} "
		else
			prep=""
		fi
		local branch
		if [[ "${type}" != "git" ]]; then
			branch="";
		else
			branch=" -e BRANCH=${DICTIONARY['branch']:=master} "
		fi
		if [[ "$forceStart" == 1 ]];then
			echo "   - forcing stop and removal of ${locker} container before attempting start"
			sudo docker stop ${locker} >> machine.log
			sudo docker rm ${locker} >> machine.log
		fi
		echo ""
		echo -e "- starting ${BOLD}${locker}${NORMAL} with '${GREEN}${command}${NORMAL}' command"
		local startCommand="sudo docker run ${removeTransients} --name ${locker}${branch}${prep}${sshAgentForDocker} lifegadget/docker-locker ${command} ${source}"
		echo -e "     ${DIM}${startCommand}\033[0m"
		echo "`${startCommand}`"
		echo ""
	done
}

function StartInfrastructure() {
	echo ""
	echo -e "Starting all ${BOLD}Infrastructure${NORMAL} associated with this machine:"
	echo "---------------------------------------------------------"

	while getopts ":fv" opt; do
	    case $opt in 
	        v) 
				verbose=1
	            ;;
	        f)
				forceStart=1
				;;
	        \? ) echo "invalid switch used in StartInfrastructure call"
	             exit 1
	    esac
	done

	local infraList=`echo "${infrastructure}" | jsawk -n 'out(this.id)'`
	for infraItem in $infraList; do
		echo "Processing ${infraItem}"
		container=`echo "${infrastructure}" | jsawk -q "[?(id='${infraItem}')]"`
		getDictionary "${container}";
		local command="${DICTIONARY['command']:=start}"
		local image="${DICTIONARY['image']:=ubuntu}"
		local branch="${DICTIONARY['branch']:=latest}"
		local links="${DICTIONARY['links']:=}"
		local volumes="${DICTIONARY['volumes']:=}"
		local ports="${DICTIONARY['ports']:=}"
		local locker="${DICTIONARY['locker']:=}"
		local sshForward="${DICTIONARY['sshForward']:=0}" # passing host's SSH credentials to infrastucture is optional
		# convert variables to docker syntax
		local dockerImage=" ${image}:${branch}"
		if [[ ! -z "$locker" ]]; then
			if [[ ${verbose} == 1 ]]; then
				echo -e "   - ${DIM}${infraItem} container is using the ${NORMAL}${locker}${DIM} locker which is available at /storage in the container${NORMAL}"
			fi
			locker=" --volumesFrom ${locker}"
		fi
		# SSH FORWARDING
		if [[ "${sshForward}" == 1 ]]; then	
			sshForward=${sshAgentForDocker}
		else
			sshForward=""
		fi	
		# LINKS
		local linksConfig=""
		if [[ ${links:0:1} != "[" ]]; then
			echo -e "${RED}${BOLD}ERROR:${NORMAL} the links configuration should be an array but was: '${links}'"
			echo ""
			exit 1;
		else
			getArray $links
			links="${BASH_ARRAY}"
			for link in $links; do
				link="${link:1:-1}" # remove the quotation marks
				# if link config doesn't have names for both host and container then mirror the naming
				if [[ ! -z ${link/*:*/} ]]; then
					link="${link}:${link}"
				fi
				if [[ ${verbose} == 1 ]]; then
					echo -e "   - ${DIM}network/dns links to ${NORMAL}${link%:*} ${DIM}available to container as '${link#*:}'${NORMAL}"
				fi
				linksConfig="${linksConfig} --link $link"
			done
		fi
		# VOLUMES
		local volumesConfig=""
		if [[ ${volumes:0:1} != "[" ]]; then
			echo -e "${RED}${BOLD}ERROR:${NORMAL} the volumes configuration should be an array but was: '${volumes}'"
			echo ""
			exit 1;
		else
			getArray $volumes
			volumes="${BASH_ARRAY}"
			for volume in $volumes; do
				volume="${volume:1:-1}" # remove the quotation marks
				# if volume config doesn't have names for both host and container then mirror the naming
				if [[ ! -z "${volume/*:*/}" ]]; then
					volume="${volume}:${volume}"
				fi
				if [[ ${verbose} == 1 ]]; then
					echo -e "   - ${DIM} host machine's ${NORMAL}'${volume%:*}'${DIM} filesystem will be shared to the containers ${NORMAL}'${volume#*:}'${DIM} directory ${NORMAL}"
				fi
				linksConfig="${volumesConfig} -v $volume"
			done
		fi
		# PORTS
		local portsConfig=""
		if [[ ("${ports:0:1}" != "[") && "$ports" != "" ]]; then
			echo -e "${RED}${BOLD}ERROR:${NORMAL} the ports configuration should be an array but was: '${ports}'"
			echo ""
			exit 1;
		else
			getArray $ports
			ports="${BASH_ARRAY}"
			for port in $ports; do
				port="${port:1:-1}" # remove the quotation marks
				# if volume config doesn't have names for both host and container then mirror the naming
				if [[ ! -z "${port/*:*/}" ]]; then
					port="${port}:${port}"
				fi
				if [[ ${verbose} == 1 ]]; then
					echo -e "   - ${DIM}host machine's ${NORMAL}'${port%:*}'${DIM} port will be mapped to the containers ${NORMAL}'${port#*:}'${DIM} port ${NORMAL}"
				fi
				portsConfig="${portsConfig} -p ${port}"
			done
		fi
		
		dockerCommand="sudo docker run -d --name ${infraItem} ${volumesConfig}${linksConfig}${portsConfig} ${sshForward} ${dockerImage} ${command}"
		echo -e "${BOLD}Starting ${GREEN}${infraItem}${NORMAL}"
		echo -e "   ${DIM}${dockerCommand}${NORMAL}"
		echo ""
		if [[ "$forceStart" == 1 ]];then
			echo "   - forcing stop and removal of ${infraItem} container before attempting start"
			sudo docker stop ${infraItem} >> machine.log
			sudo docker rm ${infraItem} >> machine.log
		fi
		${dockerCommand}
	done
	
	echo "Currently Running Infrastructure:"
	echo "---------------------------------"
	sudo docker ps

}




ValidateBashVersion;
case "$1" in 
	inventory)
		shift;
		MachineInventory $@;
	;;
	init)
		shift;
		LoadLockers $@;
		StartInfrastructure $@;
	;;
	*)
		AboutMachine;
	;;
esac
